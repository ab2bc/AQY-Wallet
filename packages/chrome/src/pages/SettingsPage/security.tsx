import classnames from 'classnames';
import styles from './security.module.scss';
import Button from '../../components/Button';
import { Route, Routes, useNavigate } from 'react-router-dom';
import Modal from '../../components/Modal';
import { RevealMnemonicParams, UpdatePasswordParams } from '@suiet/core';
import { useSelector } from 'react-redux';
import { RootState } from '../../store';
import { useState } from 'react';
import SetPassword from '../onboarding/SetPassword';
import copy from 'copy-to-clipboard';
import message from '../../components/message';
import { useApiClient } from '../../hooks/useApiClient';
import Nav from '../../components/Nav';
import { Extendable, OmitToken } from '../../types';
import SettingTwoLayout from '../../layouts/SettingTwoLayout';
import Typo from '../../components/Typo';
import PhraseModal from '../../components/secrets/PhraseModal';
import SecretModal from '../../components/secrets/SecretModal';
import ForgetPassword from '../LockPage/ForgetPassword';

type SecurityItemProps = Extendable & {
  title: string;
  desc: string;
};

const SecurityItem = (props: SecurityItemProps) => {
  return (
    <div className={classnames(styles['secutity-card'], props.className)}>
      <Typo.Title className={styles['security-title']}>
        {props.title}
      </Typo.Title>
      <Typo.Normal className={classnames(styles['security-desc'])}>
        {props.desc}
      </Typo.Normal>

      {props.children}
    </div>
  );
};

function MainPage() {
  const navigate = useNavigate();
  const { context } = useSelector((state: RootState) => ({
    context: state.appContext,
  }));
  const [phrase, setPhrase] = useState<string[]>([]);
  const [privateKey, setPrivate] = useState('');
  const apiClient = useApiClient();

  return (
    <SettingTwoLayout
      title={'Security'}
      desc={'The security settings of your wallet'}
    >
      <Nav
        position={'absolute'}
        onNavBack={() => {
          navigate('/settings');
        }}
      />

      <section className={'mt-[36px]'}>
        <SecurityItem
          title={'Password'}
          desc={'change your wallet login password'}
        >
          <Button
            onClick={() =>
              navigate('password', {
                state: {
                  hasOldPassword: true,
                },
              })
            }
            className="mb-8"
          >
            Update Password
          </Button>
        </SecurityItem>
        <SecurityItem
          title={'Recovery Phrases'}
          desc={
            'A recovery phrase grants full access to all wallets generated by it. You can manage and export your recovery phrases.'
          }
        >
          <PhraseModal
            phrases={phrase}
            trigger={<Button state={'danger'}>Show the Phrases</Button>}
            onOpenChange={async () => {
              const rawPhrases = await apiClient.callFunc<
                OmitToken<RevealMnemonicParams>,
                string
              >(
                'wallet.revealMnemonic',
                {
                  walletId: context.walletId,
                },
                { withAuth: true }
              );
              setPhrase(rawPhrases.split(' '));
            }}
          />
        </SecurityItem>

        <SecurityItem
          title={'Private Key'}
          desc={
            'The private key grants full access to the current wallet. You can export the wallet by exporting its private key.'
          }
        >
          <SecretModal
            title={'Private Key'}
            trigger={
              <Button className="mb-8" state={'danger'}>
                Show the Private Key
              </Button>
            }
            onOpenChange={async () => {
              const privateKey = await apiClient.callFunc<
                OmitToken<RevealMnemonicParams>,
                string
              >(
                'wallet.revealPrivate',
                {
                  walletId: context.walletId,
                },
                { withAuth: true }
              );
              setPrivate(privateKey);
            }}
            onCopy={() => {
              copy(privateKey);
              message.success('Copied');
            }}
          >
            {privateKey}
          </SecretModal>
        </SecurityItem>
      </section>
    </SettingTwoLayout>
  );
}

function PasswordSetting() {
  const apiClient = useApiClient();
  const navigate = useNavigate();

  async function handleSetPassword(password: string, oldPassword?: string) {
    await apiClient.callFunc<UpdatePasswordParams, undefined>(
      'auth.updatePassword',
      {
        oldPassword: oldPassword ?? '',
        newPassword: password,
      }
    );
    message.success('Update password succeeded');
    navigate('..');
  }

  return (
    <div>
      <Nav
        onNavBack={() => {
          navigate('..');
        }}
      />
      <SetPassword
        onNext={handleSetPassword}
        style={{
          paddingTop: 0,
        }}
      />
    </div>
  );
}

export default function Security() {
  const navigate = useNavigate();

  return (
    <Routes>
      <Route path="/" element={<MainPage />} />
      <Route path="password" element={<PasswordSetting />} />
      <Route
        path="reset"
        element={
          <div>
            <Nav
              title={'Reset Suiet'}
              onNavBack={() => {
                navigate('..');
              }}
            />
            <ForgetPassword
              titles={['Reset', 'Suiet']}
              desc={'Be careful! You may reset your app here.'}
            />
          </div>
        }
      />
    </Routes>
  );
}
